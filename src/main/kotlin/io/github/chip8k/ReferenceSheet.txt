useful notes:
    - Byte = 8 bits
    - Short = 16 bits
    - and = bitwise operation (1111 & 0001 = 0001), 1 if both 1
    - or = bitwise operation (1100 | 0001 = 1101), 1 if either 1
    - xor = bitwise operation (1100 ^ 0101 = 1001), 1 if different/opposite
    - inv()/not = bitwise operation (1001 -> 0110), flips all bits
    - shl/shift left = bitwise operation (0001 << 1 = 0010) shifts all bits to the left by 1 adding a 0 to the end
    - shr/shift right = bitwise operation (0010 >> 1 = 0001) shifts all bits to the right by 1 removing the last bit

hexadecimal to binary:
    - 0x00 = 0000 0000 = 0
    - 0x0F = 0000 1111 = 15

    - 0x10 = 0001 0000 = 16
    - 0xFF = 1111 1111 = 255

    - 0x100 = 0001 0000 0000 = 256
    - 0xFFFF = 1111 1111 1111 1111 = 65535

    1 = 0001 (new binary number)
    2 = 0010 (new binary number)
    3 = 0011
    4 = 0100 (new binary number)
    5 = 0101
    6 = 0110
    7 = 0111
    8 = 1000 (new binary number)
    9 = 1001
    A = 1010
    B = 1011
    C = 1100
    D = 1101
    F = 1111
    10 = 0001 0000 (new binary number)

    0x6b -> 0110 1011
    &
    0x52 -> 0101 0010
    is
    0x42 -> 0100 0010

    8-bit register = 0x00 = 0000 0000
    16-bit register = 0x0000 = 0000 0000 0000 0000


opcode table: https://en.wikipedia.org/wiki/CHIP-8#Virtual_machine_description
    NNN: address
    NN: 8-bit constant
    N: 4-bit constant
    X and Y: 4-bit register identifier
